{"version":3,"sources":["utils/fetchClient.ts","types/NotificationType.ts","types/Field.ts","types/FieldIcon.ts","context/ListContext.tsx","api/users.ts","api/posts.ts","api/comments.ts","hooks/useUsersContext.ts","components/Loader/Loader.tsx","components/Users/UsersList.tsx","components/Users/UserSelector.tsx","hooks/usePostsContext.ts","components/Comments/TextField.tsx","hooks/useCommentsContext.ts","hooks/useGlobalContext.ts","components/Comments/NewCommentForm.tsx","components/Comments/CommentInfo.tsx","components/Comments/CommentList.tsx","components/Notification.tsx","components/Posts/PostDetails.tsx","components/Sidebar.tsx","components/Posts/PostInfo.tsx","components/Posts/PostList.tsx","components/ListApp.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","NotificationType","Field","FieldIcon","client","GlobalContext","createContext","PostsContext","UsersContext","CommentsContext","ListProvider","children","useState","error","setError","users","setUsers","selectedUser","setSelectedUser","isUsersLoading","setIsUsersLoading","posts","setPosts","isPostsLoading","setIsPostsLoading","selectedPost","setSelectedPost","comments","setComments","isCommentsLoading","setIsCommentsLoading","commentIsProcessing","setCommentIsProcessing","useEffect","usersList","catch","finally","userId","id","postList","postId","commentsList","globalValue","resetError","postsValue","onSelectPost","post","usersValue","onSelectUser","user","commentsValue","onAddNewComment","comment","postComment","newComment","prevComments","onDeleteComment","commentId","filter","deleteComment","Provider","value","useUsersContext","useContext","Loader","className","UsersList","onCloseDropdown","map","href","classNames","onClick","handleSelectUser","name","UserSelector","dropdownIsActive","setDropdownIsActive","dropdownRef","useRef","closeDropdown","handleClickOutsideDropdown","event","dropdown","current","contains","target","document","addEventListener","removeEventListener","ref","type","prevState","role","usePostsContext","TextField","props","field","label","placeholder","icon","isErrorIcon","errorMessage","isSubmitted","isReseted","setIsSubmitted","onChange","isError","setIsError","handleChangeValue","htmlFor","input","textarea","useCommentsContext","useGlobalContext","NewCommentForm","userName","setUserName","userEmail","setUserEmail","userCommentText","setUserCommentText","setIsReseted","onSubmit","a","preventDefault","email","onReset","Name","NameIcon","Email","EmailIcon","Body","CommentInfo","CommentList","writingNewPost","onWritingNewPost","length","Notification","warningText","PostDetails","setWritingNewPost","title","CommentsError","PostsError","Sidebar","PostInfo","PostList","PostsWarning","ListApp","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.82b3b3e2.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum NotificationType {\n  PostsError = 'PostsLoadingError',\n  CommentsError = 'CommentsError',\n  PostsWarning = 'NoPostsYet',\n}\n","export enum Field {\n  Name = 'NameField',\n  Email = 'EmailField',\n  Body = 'BodyField',\n}\n","export enum FieldIcon {\n  NameIcon = 'fas fa-user',\n  EmailIcon = 'fas fa-envelope',\n}\n","import {\n  FC, createContext, useState, useEffect, ReactNode,\n} from 'react';\nimport {\n  User, Post, Comment, CommentData,\n} from '../types';\nimport { getUsers } from '../api/users';\nimport { getPosts } from '../api/posts';\nimport { deleteComment, getComments, postComment } from '../api/comments';\n\ntype Props = {\n  children: ReactNode;\n};\n\ninterface IGlobalContext {\n  error: boolean;\n  resetError: () => void;\n}\n\ninterface IPostsContext {\n  posts: Post[];\n  isPostsLoading: boolean;\n  selectedPost: Post | null,\n  onSelectPost: (post: Post) => void;\n}\n\ninterface IUsersContext {\n  users: User[];\n  selectedUser: User | null;\n  isUsersLoading: boolean;\n  onSelectUser: (user: User) => void;\n}\n\ninterface ICommentsContext {\n  comments: Comment[];\n  isCommentsLoading: boolean;\n  commentIsProcessing: boolean;\n  onAddNewComment: (comment: CommentData) => Promise<boolean>;\n  onDeleteComment: (commentId: number) => void;\n}\n\nexport const GlobalContext = createContext({} as IGlobalContext);\nexport const PostsContext = createContext({} as IPostsContext);\nexport const UsersContext = createContext({} as IUsersContext);\nexport const CommentsContext = createContext({} as ICommentsContext);\n\nexport const ListProvider: FC<Props> = ({ children }) => {\n  const [error, setError] = useState(false);\n\n  // #region User states\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isUsersLoading, setIsUsersLoading] = useState(false);\n  // #endregion\n\n  // #region Posts states\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  // #endregion\n\n  // #region Comments states\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [commentIsProcessing, setCommentIsProcessing] = useState(false);\n  // #endregion\n\n  // #region load data\n\n  /* load users */\n  useEffect(() => {\n    setError(false);\n    setIsUsersLoading(true);\n\n    getUsers()\n      .then((usersList) => setUsers(usersList))\n      .catch(() => setError(true))\n      .finally(() => setIsUsersLoading(false));\n  }, []);\n\n  /* load posts for selected user */\n  useEffect(() => {\n    setError(false);\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      getPosts(selectedUser.id)\n        .then(postList => setPosts(postList))\n        .catch(() => setError(true))\n        .finally(() => setIsPostsLoading(false));\n    }\n  }, [selectedUser]);\n\n  /* load comments for selected post */\n  useEffect(() => {\n    setError(false);\n\n    if (selectedPost) {\n      getComments(selectedPost.id)\n        .then(commentsList => setComments(commentsList))\n        .catch(() => setError(true))\n        .finally(() => setIsCommentsLoading(false));\n    }\n  }, [selectedPost]);\n  // #endregion\n\n  const onSelectUser = (user: User) => {\n    if (selectedUser === user) {\n      return;\n    }\n\n    setSelectedUser(user);\n    setPosts([]);\n    setIsPostsLoading(true);\n  };\n\n  const onSelectPost = (post: Post) => {\n    setComments([]);\n\n    if (post.id === selectedPost?.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setIsCommentsLoading(true);\n    setSelectedPost(post);\n  };\n\n  const onAddNewComment = (comment: CommentData) => {\n    setError(false);\n\n    setCommentIsProcessing(true);\n\n    return postComment((selectedPost?.id as number), comment)\n      .then(newComment => {\n        setComments(prevComments => [...prevComments, newComment]);\n\n        return true;\n      })\n      .catch(() => {\n        setError(true);\n\n        return false;\n      })\n      .finally(() => setCommentIsProcessing(false));\n  };\n\n  const onDeleteComment = (commentId: number) => {\n    setError(false);\n\n    setComments(prevComments => (\n      prevComments.filter(comment => comment.id !== commentId)\n    ));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setError(true);\n        setComments(comments);\n      });\n  };\n\n  const globalValue: IGlobalContext = {\n    error,\n    resetError: () => setError(false),\n  };\n\n  const postsValue: IPostsContext = {\n    posts,\n    selectedPost,\n    isPostsLoading,\n    onSelectPost,\n  };\n\n  const usersValue: IUsersContext = {\n    users,\n    selectedUser,\n    isUsersLoading,\n    onSelectUser,\n  };\n\n  const commentsValue: ICommentsContext = {\n    comments,\n    isCommentsLoading,\n    commentIsProcessing,\n    onAddNewComment,\n    onDeleteComment,\n  };\n\n  return (\n    <GlobalContext.Provider value={globalValue}>\n      <UsersContext.Provider value={usersValue}>\n        <PostsContext.Provider value={postsValue}>\n          <CommentsContext.Provider value={commentsValue}>\n            {children}\n          </CommentsContext.Provider>\n        </PostsContext.Provider>\n      </UsersContext.Provider>\n    </GlobalContext.Provider>\n  );\n};\n","import { User } from '../types';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { Comment, CommentData } from '../types';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (postId: number, comment: CommentData) => {\n  return client.post<Comment>('/comments', {\n    ...comment,\n    postId,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { useContext } from 'react';\nimport { UsersContext } from '../context/ListContext';\n\nexport const useUsersContext = () => useContext(UsersContext);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { useUsersContext } from '../../hooks/useUsersContext';\nimport { User } from '../../types';\n\ntype Props = {\n  onCloseDropdown: () => void;\n};\n\nexport const UsersList: FC<Props> = ({ onCloseDropdown }) => {\n  const { onSelectUser, selectedUser, users } = useUsersContext();\n\n  const handleSelectUser = (user: User) => {\n    onSelectUser(user);\n    onCloseDropdown();\n  };\n\n  return (\n    <>\n      {users.map((user) => (\n        <a\n          href={`#user-${user.id}`}\n          className={classNames('dropdown-item', {\n            'is-active': selectedUser?.id === user.id,\n          })}\n          key={user.id}\n          onClick={() => handleSelectUser(user)}\n        >\n          {user.name}\n        </a>\n      ))}\n    </>\n  );\n};\n","import {\n  FC, useState, useEffect, useRef,\n} from 'react';\nimport classNames from 'classnames';\nimport { useUsersContext } from '../../hooks/useUsersContext';\nimport { Loader } from '../Loader';\nimport { UsersList } from './UsersList';\n\nexport const UserSelector: FC = () => {\n  const { isUsersLoading, selectedUser } = useUsersContext();\n\n  const [dropdownIsActive, setDropdownIsActive] = useState(false);\n\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  const toggleDropdown = () => {\n    setDropdownIsActive(prevState => !prevState);\n  };\n\n  const closeDropdown = () => setDropdownIsActive(false);\n\n  const handleClickOutsideDropdown = (event: MouseEvent) => {\n    const dropdown = dropdownRef.current;\n\n    if (dropdown && !dropdown.contains(event.target as Node)) {\n      closeDropdown();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutsideDropdown);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutsideDropdown);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropdownIsActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {isUsersLoading ? (\n            <Loader />\n          ) : (\n            <UsersList onCloseDropdown={closeDropdown} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport { PostsContext } from '../context/ListContext';\n\nexport const usePostsContext = () => useContext(PostsContext);\n","import {\n  FC, ChangeEvent, useState, useEffect,\n} from 'react';\nimport classNames from 'classnames';\nimport { FieldIcon, Field } from '../../types';\n\ntype Props = {\n  field: Field;\n  type: 'text' | 'textarea';\n  id: string;\n  label: string;\n  placeholder: string;\n  name: 'name' | 'email' | 'body';\n  icon?: FieldIcon;\n  isErrorIcon?: boolean;\n  errorMessage: string;\n  isSubmitted: boolean;\n  isReseted: boolean;\n  value: string;\n  onChange: (value: string) => void;\n  setIsSubmitted: (value: boolean) => void;\n};\n\nexport const TextField: FC<Props> = (props) => {\n  const {\n    field,\n    type,\n    id,\n    label,\n    placeholder,\n    name,\n    icon,\n    isErrorIcon,\n    errorMessage,\n    value,\n    isSubmitted,\n    isReseted,\n    setIsSubmitted,\n    onChange,\n  } = props;\n\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    if (isSubmitted) {\n      setIsError(!value);\n      setIsSubmitted(false);\n    }\n  }, [isSubmitted]);\n\n  useEffect(() => {\n    if (isReseted) {\n      setIsError(false);\n      onChange('');\n    }\n  }, [isReseted]);\n\n  const handleChangeValue = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setIsError(false);\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"field\" data-cy={field}>\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div\n        className={classNames('control', {\n          'has-icons-left has-icons-right': type === 'text',\n        })}\n      >\n        {type === 'text' ? (\n          <input\n            type={type}\n            value={value}\n            name={name}\n            id={id}\n            placeholder={placeholder}\n            className={classNames({\n              input: type === 'text',\n              'is-danger': isError,\n            })}\n            onChange={handleChangeValue}\n          />\n        ) : (\n          <textarea\n            value={value}\n            id={id}\n            name={name}\n            placeholder={placeholder}\n            className={classNames({\n              textarea: type === 'textarea',\n              'is-danger': isError,\n            })}\n            onChange={handleChangeValue}\n          />\n        )}\n\n        {icon && (\n          <span className=\"icon is-small is-left\">\n            <i className={icon} />\n          </span>\n        )}\n\n        {(isErrorIcon && isError) && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {isError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {errorMessage}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport { CommentsContext } from '../context/ListContext';\n\nexport const useCommentsContext = () => useContext(CommentsContext);\n","import { useContext } from 'react';\nimport { GlobalContext } from '../context/ListContext';\n\nexport const useGlobalContext = () => useContext(GlobalContext);\n","import {\n  FC, FormEvent, useState, useEffect,\n} from 'react';\nimport classNames from 'classnames';\nimport { TextField } from './TextField';\nimport { CommentData, Field, FieldIcon } from '../../types';\nimport { useCommentsContext } from '../../hooks/useCommentsContext';\nimport { useGlobalContext } from '../../hooks/useGlobalContext';\n\nexport const NewCommentForm: FC = () => {\n  const { resetError } = useGlobalContext();\n  const { onAddNewComment, commentIsProcessing } = useCommentsContext();\n\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userCommentText, setUserCommentText] = useState('');\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isReseted, setIsReseted] = useState(false);\n\n  const onSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n    setIsSubmitted(true);\n\n    if (!userName || !userEmail || !userCommentText) {\n      return;\n    }\n\n    const newComment: CommentData = {\n      name: userName,\n      email: userEmail,\n      body: userCommentText,\n    };\n\n    const commentIsCreated = await onAddNewComment(newComment);\n\n    if (commentIsCreated) {\n      setUserCommentText('');\n    }\n  };\n\n  const onReset = () => {\n    setIsReseted(true);\n    resetError();\n  };\n\n  useEffect(() => {\n    if (isReseted) {\n      setIsReseted(false);\n    }\n  }, [isReseted]);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onSubmit}\n      onReset={onReset}\n    >\n      <TextField\n        field={Field.Name}\n        id=\"comment-author-name\"\n        label=\"Author Name\"\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name Surname\"\n        errorMessage=\"Name is required\"\n        icon={FieldIcon.NameIcon}\n        isErrorIcon\n        isSubmitted={isSubmitted}\n        isReseted={isReseted}\n        setIsSubmitted={setIsSubmitted}\n        value={userName}\n        onChange={setUserName}\n      />\n\n      <TextField\n        field={Field.Email}\n        id=\"comment-author-email\"\n        label=\"Author Email\"\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"email@test.com\"\n        errorMessage=\"Email is required\"\n        icon={FieldIcon.EmailIcon}\n        isErrorIcon\n        isSubmitted={isSubmitted}\n        isReseted={isReseted}\n        setIsSubmitted={setIsSubmitted}\n        value={userEmail}\n        onChange={setUserEmail}\n      />\n\n      <TextField\n        field={Field.Body}\n        id=\"comment-body\"\n        label=\"Comment Text\"\n        type=\"textarea\"\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        errorMessage=\"Enter some text\"\n        isSubmitted={isSubmitted}\n        isReseted={isReseted}\n        setIsSubmitted={setIsSubmitted}\n        value={userCommentText}\n        onChange={setUserCommentText}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': commentIsProcessing,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { FC } from 'react';\nimport { Comment } from '../../types';\nimport { useCommentsContext } from '../../hooks/useCommentsContext';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const CommentInfo: FC<Props> = ({ comment }) => {\n  const { onDeleteComment } = useCommentsContext();\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDeleteComment(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { useCommentsContext } from '../../hooks/useCommentsContext';\nimport { useGlobalContext } from '../../hooks/useGlobalContext';\nimport { CommentInfo } from './CommentInfo';\n\ntype Props = {\n  writingNewPost: boolean;\n  onWritingNewPost: (value: boolean) => void;\n};\n\nexport const CommentList: FC<Props> = (props) => {\n  const { writingNewPost, onWritingNewPost } = props;\n\n  const { error } = useGlobalContext();\n  const { comments } = useCommentsContext();\n\n  return (\n    <>\n      {(comments.length > 0 && !error) && (\n        <p className=\"title is-4\">Comments:</p>\n      )}\n\n      {(comments.length === 0 && !error) && (\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n      )}\n\n      {comments.map((comment) => (\n        <CommentInfo comment={comment} key={comment.id} />\n      ))}\n\n      {(!writingNewPost && (!error || comments.length > 0)) && (\n        <button\n          data-cy=\"WriteCommentButton\"\n          type=\"button\"\n          className=\"button is-link\"\n          onClick={() => onWritingNewPost(true)}\n        >\n          Write a comment\n        </button>\n      )}\n    </>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { NotificationType } from '../types/NotificationType';\nimport { useGlobalContext } from '../hooks/useGlobalContext';\n\ntype Props = {\n  type: NotificationType;\n} & (\n  {\n    type: NotificationType.PostsWarning;\n    warningText: string\n  } | {\n    type: Exclude<NotificationType, NotificationType.PostsWarning>;\n    warningText?: string;\n  }\n);\n\nexport const Notification: FC<Props> = ({ type, warningText }) => {\n  const { error } = useGlobalContext();\n\n  return (\n    <div\n      className={classNames('notification', {\n        'is-danger': error,\n        'is-warning': !error,\n      })}\n      data-cy={type}\n    >\n      {error ? (\n        'Something went wrong!'\n      ) : (\n        warningText\n      )}\n    </div>\n  );\n};\n","import { FC, useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../Comments/NewCommentForm';\nimport { useCommentsContext } from '../../hooks/useCommentsContext';\nimport { usePostsContext } from '../../hooks/usePostsContext';\nimport { CommentList } from '../Comments/CommentList';\nimport { Notification } from '../Notification';\nimport { NotificationType } from '../../types';\nimport { useGlobalContext } from '../../hooks/useGlobalContext';\n\nexport const PostDetails: FC = () => {\n  const { error } = useGlobalContext();\n  const { selectedPost } = usePostsContext();\n  const { isCommentsLoading } = useCommentsContext();\n\n  const [writingNewPost, setWritingNewPost] = useState(false);\n\n  useEffect(() => {\n    setWritingNewPost(false);\n  }, [selectedPost]);\n\n  if (!selectedPost) {\n    return (\n      <Notification type={NotificationType.PostsError} />\n    );\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading ? (\n            <Loader />\n          ) : (\n            <CommentList\n              writingNewPost={writingNewPost}\n              onWritingNewPost={setWritingNewPost}\n            />\n          )}\n        </div>\n\n        {writingNewPost && (\n          <NewCommentForm />\n        )}\n      </div>\n\n      {error && (\n        <Notification type={NotificationType.CommentsError} />\n      )}\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { usePostsContext } from '../hooks/usePostsContext';\nimport { PostDetails } from './Posts/PostDetails';\n\nexport const Sidebar: FC = () => {\n  const { selectedPost } = usePostsContext();\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        {\n          'Sidebar--open': selectedPost,\n        },\n      )}\n    >\n\n      {selectedPost && (\n        <div className=\"tile is-child box is-success\">\n          <PostDetails />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types';\nimport { usePostsContext } from '../../hooks/usePostsContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostInfo: FC<Props> = ({ post }) => {\n  const { selectedPost, onSelectPost } = usePostsContext();\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link', {\n            'is-light': post.id !== selectedPost?.id,\n          })}\n          onClick={() => onSelectPost(post)}\n        >\n          {\n            post.id === selectedPost?.id\n              ? 'Close'\n              : 'Open'\n          }\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { usePostsContext } from '../../hooks/usePostsContext';\nimport { useGlobalContext } from '../../hooks/useGlobalContext';\nimport { Notification } from '../Notification';\nimport { NotificationType } from '../../types';\nimport { PostInfo } from './PostInfo';\n\nexport const PostList: FC = () => {\n  const { error } = useGlobalContext();\n\n  const { posts, isPostsLoading } = usePostsContext();\n\n  if (posts.length === 0 && !isPostsLoading) {\n    if (error) {\n      return (\n        <Notification type={NotificationType.PostsError} />\n      );\n    }\n\n    return (\n      <Notification\n        type={NotificationType.PostsWarning}\n        warningText=\"No posts yet\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {isPostsLoading ? (\n        <Loader />\n      ) : (\n        <div data-cy=\"PostsList\">\n          <p className=\"title\">Posts:</p>\n\n          <table\n            className={classNames(\n              'table',\n              'is-fullwidth',\n              'is-striped',\n              'is-hoverable',\n              'is-narrow',\n            )}\n          >\n            <thead>\n              <tr className=\"has-background-link-light\">\n                <th>#</th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {posts.map((post) => (\n                <PostInfo post={post} key={post.id} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { UserSelector } from './Users/UserSelector';\nimport { Sidebar } from './Sidebar';\nimport { PostList } from './Posts/PostList';\nimport { useUsersContext } from '../hooks/useUsersContext';\n\nexport const ListApp: FC = () => {\n  const { selectedUser } = useUsersContext();\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser ? (\n                  <PostList />\n                ) : (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { FC } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { ListProvider } from './context/ListContext';\nimport { ListApp } from './components/ListApp';\n\nexport const App: FC = () => (\n  <ListProvider>\n    <ListApp />\n  </ListProvider>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}